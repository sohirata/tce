      SUBROUTINE ipeomccsd_x1(d_f1,d_i0,d_t1,d_t2,d_v2,d_x1,d_x2,k_f1_of
     &fset,k_i0_offset,k_t1_offset,k_t2_offset,k_v2_offset,k_x1_offset,k
     &_x2_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     
C     
C     i0 ( h1 )_xf + = -1 * Sum ( h6 ) * x ( h6 )_x * i1 ( h6 h1 )_f
C         i1 ( h6 h1 )_f + = 1 * f ( h6 h1 )_f
C         i1 ( h6 h1 )_vt + = -1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 h1 p3 )_v
C     i0 ( h1 )_xf + = -1 * Sum ( p7 h6 ) * x ( p7 h1 h6 )_x * i1 ( h6 p7 )_f
C         i1 ( h6 p7 )_f + = 1 * f ( h6 p7 )_f
C         i1 ( h6 p7 )_vt + = 1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 p3 p7 )_v
C     i0 ( h1 )_xv + = 1/2 * Sum ( p5 h3 h4 ) * x ( p5 h3 h4 )_x * v ( h3 h4 h1 p5 )_v
C     i0 ( h1 )_fxt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * i1 ( p8 )_fx
C         i1 ( p8 )_fx + = 1 * Sum ( h7 ) * x ( h7 )_x * i2 ( h7 p8 )_f
C             i2 ( h7 p8 )_f + = 1 * f ( h7 p8 )_f
C             i2 ( h7 p8 )_vt + = 1 * Sum ( h5 p4 ) * t ( p4 h5 )_t * v ( h5 h7 p4 p8 )_v
C         i1 ( p8 )_vx + = 1/2 * Sum ( h4 h5 p6 ) * x ( p6 h4 h5 )_x * v ( h4 h5 p6 p8 )_v
C     i0 ( h1 )_vxt + = -1/2 * Sum ( h5 p3 p4 ) * t ( p3 p4 h1 h5 )_t * i1 ( h5 p3 p4 )_vx
C         i1 ( h5 p3 p4 )_vx + = -1 * Sum ( h6 ) * x ( h6 )_x * v ( h5 h6 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_x1
      INTEGER k_x1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_x2
      INTEGER k_x2_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i1_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      DOUBLE PRECISION size_i1
      DOUBLE PRECISION size_i2
      CHARACTER*255 filename
      CALL OFFSET_ipeomccsd_x1_1_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsd_x1_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsd_x1_1_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ipeomccsd_x1_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsd_x1_1(d_x1,k_x1_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsd_x1',-1
     &,MA_ERR)
      CALL OFFSET_ipeomccsd_x1_2_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsd_x1_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsd_x1_2_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ipeomccsd_x1_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsd_x1_2(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsd_x1',-1
     &,MA_ERR)
      CALL ipeomccsd_x1_3(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i0,k_i0_of
     &fset)
      CALL OFFSET_ipeomccsd_x1_4_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsd_x1_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_ipeomccsd_x1_4_1_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsd_x1_4_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsd_x1_4_1_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ipeomccsd_x1_4_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_i
     &2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsd_x1_4_1(d_x1,k_x1_offset,d_i2,k_i2_offset,d_i1,k_i1_
     &offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsd_x1',-1
     &,MA_ERR)
      CALL ipeomccsd_x1_4_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsd_x1_4(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsd_x1',-1
     &,MA_ERR)
      CALL OFFSET_ipeomccsd_x1_5_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsd_x1_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsd_x1_5_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1_
     &offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsd_x1_5(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_of
     &fset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsd_x1',-1
     &,MA_ERR)
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     i0 ( h1 )_xf + = -1 * Sum ( h6 ) * x ( h6 )_x * i1 ( h6 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h6b
      INTEGER dummy_p2b_1
      INTEGER h6b_1
      INTEGER h6b_2
      INTEGER h1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+h1b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(
     &irrep_x,irrep_f)) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h6b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p2b,h6b,dummy_p2b_1,h6b_1)
      CALL TCE_RESTRICTED_2(h6b,h1b,h6b_2,h1b_2)
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h6b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_1',3,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h1b_2
     & - 1 + noab * (h6b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_1',6,MA_ERR
     &)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_1',7,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_1',8,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_1',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_1',10,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_1',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( h6 h1 )_f + = 1 * f ( h6 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h1b
      INTEGER dimc
      INTEGER h6b_1
      INTEGER h1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      CALL TCE_RESTRICTED_2(h6b,h1b,h6b_1,h1b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_1_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + (noab+nvab) * (h6b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_1_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_1_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h6b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_1_1',4,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_1_1',5
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsd_x1_1_1(l_a_offset,k_a_offset,size)
C     i1 ( h6 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h6b
      INTEGER h1b
      DOUBLE PRECISION size
      length = 0
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsd_x1_1_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(h1b - 1 + noab * (h6b - 1))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h6b-1)) * dfloat(int_mb(k_rang
     &e+h1b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i1 ( h6 h1 )_vt + = -1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 h1 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p3b
      INTEGER h4b
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h6b_2
      INTEGER h4b_2
      INTEGER h1b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h4b,p3b_1,h4b_1)
      CALL TCE_RESTRICTED_4(h6b,h4b,h1b,p3b,h6b_2,h4b_2,h1b_2,p3b_2)
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h4b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h4b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_1_2',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_1_2',5,MA_ERR)
      IF ((h4b .le. h6b) .and. (h1b .le. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p3b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF ((h6b .lt. h4b) .and. (h1b .le. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p3b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p3b-1)
     &,3,1,2,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_1_2',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_1_2',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_1_2',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_1_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h6b-1),2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_1_2',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_1_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     i0 ( h1 )_xf + = -1 * Sum ( p7 h6 ) * x ( p7 h1 h6 )_x * i1 ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p7b
      INTEGER h6b
      INTEGER dummy_p2b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER h6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+h1b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(
     &irrep_x,irrep_f)) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p7b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),ieor(int_mb(k_sym+p7b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p2b,p7b,h1b,h6b,dummy_p2b_1,p7b_1,h1b_
     &1,h6b_1)
      CALL TCE_RESTRICTED_2(h6b,p7b,h6b_2,p7b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_2',2,MA_ERR)
      IF ((h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p7b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),2,3,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_2',3,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - noab - 1 + nvab * (h6b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p7b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_2',6,MA_ERR
     &)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_2',7,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_2',8,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_2',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_2',10,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_2',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( h6 p7 )_f + = 1 * f ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p7b
      INTEGER dimc
      INTEGER h6b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      CALL TCE_RESTRICTED_2(h6b,p7b,h6b_1,p7b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p7b_1
     & - 1 + (noab+nvab) * (h6b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p7b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_2_1',2,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_2_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h6b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p7b -
     & noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_2_1',4,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_2_1',5
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsd_x1_2_1(l_a_offset,k_a_offset,size)
C     i1 ( h6 p7 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h6b
      INTEGER p7b
      DOUBLE PRECISION size
      length = 0
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsd_x1_2_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p7b - noab - 1 + nvab * (h6b - 1)
     &)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h6b-1)) * dfloat(int_mb(k_rang
     &e+p7b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i1 ( h6 p7 )_vt + = 1 * Sum ( h4 p3 ) * t ( p3 h4 )_t * v ( h4 h6 p3 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h6b
      INTEGER p7b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p3b
      INTEGER h4b
      INTEGER p3b_1
      INTEGER h4b_1
      INTEGER h6b_2
      INTEGER h4b_2
      INTEGER p7b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h6b = 1,noab
      DO p7b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+p7b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),int_mb(k_sym+p7b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p3b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h4b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h4b,p3b_1,h4b_1)
      CALL TCE_RESTRICTED_4(h6b,h4b,p7b,p3b,h6b_2,h4b_2,p7b_2,p3b_2)
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+h4b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h4b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h4b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_2_2',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_2_2',5,MA_ERR)
      IF ((h4b .le. h6b) .and. (p3b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),int_mb(k_range+p7b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h4b .le. h6b) .and. (p7b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p3b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p7b-1),int_mb(k_range+p3b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF ((h6b .lt. h4b) .and. (p3b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+p3b-1),int_mb(k_range+p7b-1)
     &,4,1,2,3,-1.0d0,.false.)
      END IF
      IF ((h6b .lt. h4b) .and. (p7b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p3b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+p7b-1),int_mb(k_range+p3b-1)
     &,3,1,2,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_2_2',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_2_2',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_2_2',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h6b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p7b -
     & noab - 1 + nvab * (h6b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_2_2',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_2_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     i0 ( h1 )_xv + = 1/2 * Sum ( p5 h3 h4 ) * x ( p5 h3 h4 )_x * v ( h3 h4 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER h3b
      INTEGER h4b
      INTEGER dummy_p2b_1
      INTEGER p5b_1
      INTEGER h3b_1
      INTEGER h4b_1
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER h1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+h1b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(
     &irrep_x,irrep_v)) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO h3b = 1,noab
      DO h4b = h3b,noab
      IF (int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_
     &spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),ieor(int_mb(k_sym+p5b-1),ieor(i
     &nt_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p2b,p5b,h3b,h4b,dummy_p2b_1,p5b_1,h3b_
     &1,h4b_1)
      CALL TCE_RESTRICTED_4(h3b,h4b,h1b,p5b,h3b_2,h4b_2,h1b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h3b-1) * int_m
     &b(k_range+h4b-1)
      dima_sort = int_mb(k_range+dummy_p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h4b_1
     & - 1 + noab * (h3b_1 - 1 + noab * (p5b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h3b-1),int_mb(k_range+h4b-1),3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_3',3,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_3',5,MA_ERR)
      IF ((h1b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h4b_2 - 1 + (noab
     &+nvab) * (h3b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_3',6,MA_ERR
     &)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h3b .eq. h4b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_3',7,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_3',8,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_3',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,1,1.0d0/2.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_3',10,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_3',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     i0 ( h1 )_fxt + = -1 * Sum ( p8 ) * t ( p8 h1 )_t * i1 ( p8 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p8b
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER dummy_p2b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+h1b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(
     &irrep_f,ieor(irrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p8b,h1b,p8b_1,h1b_1)
      CALL TCE_RESTRICTED_2(dummy_p2b,p8b,dummy_p2b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_4',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p8b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_4',3,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - noab - 1))
      CALL TCE_SORT_1(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p8b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_4',6,MA_ERR
     &)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_4',7,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_4',8,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_4',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_4',10,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_4',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i1 ( p8 )_fx + = 1 * Sum ( h7 ) * x ( h7 )_x * i2 ( h7 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER dummy_p2b_1
      INTEGER h7b_1
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+p8b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+p8b-1)) .eq. ieor(
     &irrep_f,irrep_x)) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h7b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p2b,h7b,dummy_p2b_1,h7b_1)
      CALL TCE_RESTRICTED_2(h7b,p8b,h7b_2,p8b_2)
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h7b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_4_1',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - noab - 1 + nvab * (h7b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p8b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_4_1',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_4_1',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsd_x1_4_1(l_a_offset,k_a_offset,size)
C     i1 ( p8 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p2b
      INTEGER p8b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p2b = dummy,dummy
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+p8b-1)) .eq. ieor(
     &irrep_f,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+p8b-1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsd_x1_4_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p2b = dummy,dummy
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+p8b-1)) .eq. ieor(
     &irrep_f,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+p8b-1).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p8b - noab - 1)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p2b-1)) * dfloat(int_mb(
     &k_range+p8b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_4_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     i2 ( h7 p8 )_f + = 1 * f ( h7 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER p8b
      INTEGER dimc
      INTEGER h7b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h7b-1) * int_mb(k_range+p8b-1)
      CALL TCE_RESTRICTED_2(h7b,p8b,h7b_1,p8b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h7b-1) * int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p8b_1
     & - 1 + (noab+nvab) * (h7b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p8b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_4_1_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_4_1_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsd_x1_4_1_1(l_a_offset,k_a_offset,size)
C     i2 ( h7 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h7b
      INTEGER p8b
      DOUBLE PRECISION size
      length = 0
      DO h7b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsd_x1_4_1_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h7b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p8b - noab - 1 + nvab * (h7b - 1)
     &)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h7b-1)) * dfloat(int_mb(k_rang
     &e+p8b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_4_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i2 ( h7 p8 )_vt + = 1 * Sum ( h5 p4 ) * t ( p4 h5 )_t * v ( h5 h7 p4 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p4b
      INTEGER h5b
      INTEGER p4b_1
      INTEGER h5b_1
      INTEGER h7b_2
      INTEGER h5b_2
      INTEGER p8b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h7b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h7b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p4b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p4b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p4b,h5b,p4b_1,h5b_1)
      CALL TCE_RESTRICTED_4(h7b,h5b,p8b,p4b,h7b_2,h5b_2,p8b_2,p4b_2)
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+h5b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1 + noab * (p4b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h5b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_4_1_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1_2',5,MA_ERR)
      IF ((h5b .le. h7b) .and. (p4b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h5b .le. h7b) .and. (p8b .lt. p4b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p4b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF ((h7b .lt. h5b) .and. (p4b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p4b-1),int_mb(k_range+p8b-1)
     &,4,1,2,3,-1.0d0,.false.)
      END IF
      IF ((h7b .lt. h5b) .and. (p8b .lt. p4b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p8b-1),int_mb(k_range+p4b-1)
     &,3,1,2,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_4_1_2',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_4_1_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h7b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_4_1_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_4_1_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i1 ( p8 )_vx + = 1/2 * Sum ( h4 h5 p6 ) * x ( p6 h4 h5 )_x * v ( h4 h5 p6 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER h4b
      INTEGER h5b
      INTEGER dummy_p2b_1
      INTEGER p6b_1
      INTEGER h4b_1
      INTEGER h5b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+p8b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+p8b-1)) .eq. ieor(
     &irrep_v,irrep_x)) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      DO h4b = 1,noab
      DO h5b = h4b,noab
      IF (int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_
     &spin+h4b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),ieor(int_mb(k_sym+p6b-1),ieor(i
     &nt_mb(k_sym+h4b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p2b,p6b,h4b,h5b,dummy_p2b_1,p6b_1,h4b_
     &1,h5b_1)
      CALL TCE_RESTRICTED_4(h4b,h5b,p8b,p6b,h4b_2,h5b_2,p8b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+dummy_p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1 + noab * (h4b_1 - 1 + noab * (p6b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+h5b-1),3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_4_2',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_4_2',5,MA_ERR)
      IF ((p6b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((p8b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_4_2',6,MA_E
     &RR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h4b .eq. h5b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_4_2',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_4_2',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_4_2',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,1,1.0d0/2.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_4_2',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_4_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_of
     &fset)
C     i0 ( h1 )_vxt + = -1/2 * Sum ( h5 p3 p4 ) * t ( p3 p4 h1 h5 )_t * i1 ( h5 p3 p4 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p3b
      INTEGER p4b
      INTEGER h5b
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h1b_1
      INTEGER h5b_1
      INTEGER dummy_p2b_2
      INTEGER h5b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+h1b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(
     &irrep_v,ieor(irrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_5',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p4b,h1b,h5b,p3b_1,p4b_1,h1b_1,h5b_1)
      CALL TCE_RESTRICTED_4(dummy_p2b,h5b,p3b,p4b,dummy_p2b_2,h5b_2,p3b_
     &2,p4b_2)
      dim_common = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_5',2,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h5b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h5b-1),int_mb(k_range+h1b-1)
     &,4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p4b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+h1b-1),int_mb(k_range+h5b-1)
     &,3,4,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_5',3,MA_ERR
     &)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_5',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p4b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (h5b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p4b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_5',6,MA_ERR
     &)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p3b .eq. p4b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_5',7,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_5',8,M
     &A_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_5',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,1,-1.0d0/2.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_5',10,MA_ER
     &R)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_5',11,
     &MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsd_x1_5_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i1 ( h5 p3 p4 )_vx + = -1 * Sum ( h6 ) * x ( h6 )_x * v ( h5 h6 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p2b
      INTEGER h5b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h6b
      INTEGER dummy_p2b_1
      INTEGER h6b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p2b = dummy,dummy
      DO h5b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin
     &+h5b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p2b-1)+int_mb(k_spin+h5b-1) .eq. int_mb(k_
     &spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),ieor(int_mb(k_sym+h5b-1),ieor(i
     &nt_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+dummy_p2b-1) * int_mb(k_range+h5b-1) * int_m
     &b(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_5_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p2b-1),int_mb(k_sym+h6b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p2b,h6b,dummy_p2b_1,h6b_1)
      CALL TCE_RESTRICTED_4(h5b,h6b,p3b,p4b,h5b_2,h6b_2,p3b_2,p4b_2)
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_5_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsd_x1_5_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h6b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsd_x1_5_1',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsd_x1_5_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsd_x1_5_1',5,MA_ERR)
      IF ((h6b .lt. h5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1)
     &,4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((h5b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1)
     &,4,3,1,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsd_x1_5_1',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsd_x1_5_1',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsd_x1_5_1',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsd_x1_5_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h5b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (h5b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsd_x1_5_1',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsd_x1_5_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsd_x1_5_1(l_a_offset,k_a_offset,size)
C     i1 ( h5 p3 p4 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p2b
      INTEGER h5b
      INTEGER p3b
      INTEGER p4b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p2b = dummy,dummy
      DO h5b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_
     &spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+dummy_p2b-1),ieor(i
     &nt_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+dummy
     &_p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsd_x1_5_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p2b = dummy,dummy
      DO h5b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+dummy_p2b-1) .eq. int_mb(k_
     &spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+dummy_p2b-1),ieor(i
     &nt_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+dummy
     &_p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p4b - noab - 1 + nvab * (p3b - no
     &ab - 1 + nvab * (h5b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p2b-1)) * dfloat(int_mb(
     &k_range+h5b-1)) * dfloat(int_mb(k_range+p3b-1)) * dfloat(int_mb(k_
     &range+p4b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END

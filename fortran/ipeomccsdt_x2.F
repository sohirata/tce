      SUBROUTINE ipeomccsdt_x2(d_f1,d_i0,d_t1,d_t2,d_t3,d_v2,d_x1,d_x2,d
     &_x3,k_f1_offset,k_i0_offset,k_t1_offset,k_t2_offset,k_t3_offset,k_
     &v2_offset,k_x1_offset,k_x2_offset,k_x3_offset)
C     $Id$
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     
C     
C     i0 ( p3 h1 h2 )_xv + = 1 * Sum ( h5 ) * x ( h5 )_x * v ( h5 p3 h1 h2 )_v
C     i0 ( p3 h1 h2 )_xf + = -1 * P( 2 ) * Sum ( h8 ) * x ( p3 h1 h8 )_x * i1 ( h8 h2 )_f
C         i1 ( h8 h1 )_f + = 1 * f ( h8 h1 )_f
C         i1 ( h8 h1 )_ft + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * i2 ( h8 p9 )_f
C             i2 ( h8 p9 )_f + = 1 * f ( h8 p9 )_f
C             i2 ( h8 p9 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h8 p6 p9 )_v
C         i1 ( h8 h1 )_vt + = -1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 h8 h1 p5 )_v
C         i1 ( h8 h1 )_vt + = -1/2 * Sum ( h7 p5 p6 ) * t ( p5 p6 h1 h7 )_t * v ( h7 h8 p5 p6 )_v
C     i0 ( p3 h1 h2 )_xf + = 1 * Sum ( p8 ) * x ( p8 h1 h2 )_x * i1 ( p3 p8 )_f
C         i1 ( p3 p8 )_f + = 1 * f ( p3 p8 )_f
C         i1 ( p3 p8 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 p3 p5 p8 )_v
C         i1 ( p3 p8 )_vt + = 1/2 * Sum ( h6 h7 p5 ) * t ( p3 p5 h6 h7 )_t * v ( h6 h7 p5 p8 )_v
C         i1 ( p3 p8 )_vtt + = 1 * Sum ( h5 ) * t ( p3 h5 )_t * i2 ( h5 p8 )_vt
C             i2 ( h5 p8 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h5 h7 p6 p8 )_v
C     i0 ( p3 h1 h2 )_xv + = 1/2 * Sum ( h8 h9 ) * x ( p3 h8 h9 )_x * i1 ( h8 h9 h1 h2 )_v
C         i1 ( h8 h9 h1 h2 )_v + = 1 * v ( h8 h9 h1 h2 )_v
C         i1 ( h8 h9 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * v ( h8 h9 h2 p5 )_v
C     i0 ( p3 h1 h2 )_xv + = -1 * P( 2 ) * Sum ( p6 h5 ) * x ( p6 h1 h5 )_x * v ( h5 p3 h2 p6 )_v
C     i0 ( p3 h1 h2 )_xf + = -1 * Sum ( p9 h8 ) * x ( p3 p9 h1 h2 h8 )_x * i1 ( h8 p9 )_f
C         i1 ( h8 p9 )_f + = 1 * f ( h8 p9 )_f
C         i1 ( h8 p9 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 h8 p5 p9 )_v
C     i0 ( p3 h1 h2 )_xv + = 1/2 * P( 2 ) * Sum ( p9 h8 h10 ) * x ( p3 p9 h1 h8 h10 )_x * i1 ( h8 h10 h2 p9 )_v
C         i1 ( h8 h10 h1 p9 )_v + = 1 * v ( h8 h10 h1 p9 )_v
C         i1 ( h8 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h8 h10 p5 p9 )_v
C     i0 ( p3 h1 h2 )_xv + = 1/2 * Sum ( p6 p7 h5 ) * x ( p6 p7 h1 h2 h5 )_x * v ( h5 p3 p6 p7 )_v
C     i0 ( p3 h1 h2 )_vxt + = -1 * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 h1 h2 )_vx
C         i1 ( h10 h1 h2 )_vx + = 1 * Sum ( h6 ) * x ( h6 )_x * v ( h6 h10 h1 h2 )_v
C         i1 ( h10 h1 h2 )_fx + = 1 * Sum ( p6 ) * x ( p6 h1 h2 )_x * f ( h10 p6 )_f
C         i1 ( h10 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( h6 p7 ) * x ( p7 h1 h6 )_x * v ( h6 h10 h2 p7 )_v
C         i1 ( h10 h1 h2 )_vx + = 1/2 * Sum ( h6 p7 p8 ) * x ( p7 p8 h1 h2 h6 )_x * v ( h6 h10 p7 p8 )_v
C         i1 ( h10 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p6 ) * t ( p6 h1 )_t * i2 ( h10 h2 p6 )_vx
C             i2 ( h10 h1 p6 )_vx + = 1 * Sum ( h7 ) * x ( h7 )_x * v ( h7 h10 h1 p6 )_v
C             i2 ( h10 h1 p6 )_vx + = -1 * Sum ( h7 p8 ) * x ( p8 h1 h7 )_x * v ( h7 h10 p6 p8 )_v
C             i2 ( h10 h1 p6 )_vxt + = 1/2 * Sum ( p7 ) * t ( p7 h1 )_t * i3 ( h10 p6 p7 )_vx
C                 i3 ( h10 p6 p7 )_vx + = -1 * Sum ( h8 ) * x ( h8 )_x * v ( h8 h10 p6 p7 )_v
C         i1 ( h10 h1 h2 )_vxt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * i2 ( h10 p5 p6 )_vx
C             i2 ( h10 p5 p6 )_vx + = 1 * Sum ( h8 ) * x ( h8 )_x * v ( h8 h10 p5 p6 )_v
C     i0 ( p3 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i1 ( p3 h2 p5 )_vx
C         i1 ( p3 h1 p5 )_vx + = 1 * Sum ( h6 ) * x ( h6 )_x * v ( h6 p3 h1 p5 )_v
C         i1 ( p3 h1 p5 )_vx + = -1 * Sum ( h6 p7 ) * x ( p7 h1 h6 )_x * v ( h6 p3 p5 p7 )_v
C         i1 ( p3 h1 p5 )_vxt + = 1/2 * Sum ( p6 ) * t ( p6 h1 )_t * i2 ( p3 p5 p6 )_vx
C             i2 ( p3 p5 p6 )_vx + = -1 * Sum ( h7 ) * x ( h7 )_x * v ( h7 p3 p5 p6 )_v
C         i1 ( p3 h1 p5 )_vtx + = 1/4 * Sum ( h7 h8 ) * x ( p3 h7 h8 )_x * i2 ( h7 h8 h1 p5 )_vt
C             i2 ( h7 h8 h1 p5 )_vt + = -1 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h7 h8 p5 p6 )_v
C     i0 ( p3 h1 h2 )_fxt + = -1 * Sum ( p10 ) * t ( p3 p10 h1 h2 )_t * i1 ( p10 )_fx
C         i1 ( p10 )_fx + = 1 * Sum ( h9 ) * x ( h9 )_x * i2 ( h9 p10 )_f
C             i2 ( h9 p10 )_f + = 1 * f ( h9 p10 )_f
C             i2 ( h9 p10 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 p6 p10 )_v
C         i1 ( p10 )_vx + = 1/2 * Sum ( h6 h7 p8 ) * x ( p8 h6 h7 )_x * v ( h6 h7 p8 p10 )_v
C     i0 ( p3 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 h2 p5 )_vx
C         i1 ( h6 h1 p5 )_vx + = -1 * Sum ( h7 ) * x ( h7 )_x * v ( h6 h7 h1 p5 )_v
C         i1 ( h6 h1 p5 )_vx + = 1 * Sum ( h7 p8 ) * x ( p8 h1 h7 )_x * v ( h6 h7 p5 p8 )_v
C         i1 ( h6 h1 p5 )_vxt + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h6 p5 p7 )_vx
C             i2 ( h6 p5 p7 )_vx + = 1 * Sum ( h8 ) * x ( h8 )_x * v ( h6 h8 p5 p7 )_v
C     i0 ( p3 h1 h2 )_vxt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * i1 ( p3 p5 p6 )_vx
C         i1 ( p3 p5 p6 )_vx + = 1 * Sum ( h7 ) * x ( h7 )_x * v ( h7 p3 p5 p6 )_v
C         i1 ( p3 p5 p6 )_vx + = 1/2 * Sum ( h7 h8 ) * x ( p3 h7 h8 )_x * v ( h7 h8 p5 p6 )_v
C     i0 ( p3 h1 h2 )_vxt + = -1/2 * Sum ( h7 p5 p6 ) * t ( p3 p5 p6 h1 h2 h7 )_t * i1 ( h7 p5 p6 )_vx
C         i1 ( h7 p5 p6 )_vx + = -1 * Sum ( h8 ) * x ( h8 )_x * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_x1
      INTEGER k_x1_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_x2
      INTEGER k_x2_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_x3
      INTEGER k_x3_offset
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER d_t3
      INTEGER k_t3_offset
      INTEGER l_i1_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER d_i3
      INTEGER k_i3_offset
      INTEGER l_i3_offset
      DOUBLE PRECISION size_i1
      DOUBLE PRECISION size_i2
      DOUBLE PRECISION size_i3
      CHARACTER*255 filename
      CALL ipeomccsdt_x2_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i0,k_i0_o
     &ffset)
      CALL OFFSET_ipeomccsdt_x2_2_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_2_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_ipeomccsdt_x2_2_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_2_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_2_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ipeomccsdt_x2_2_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_
     &i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_2_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1
     &_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL ipeomccsdt_x2_2_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL ipeomccsdt_x2_2_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_2(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_o
     &ffset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_3_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_3_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_3_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ipeomccsdt_x2_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL ipeomccsdt_x2_3_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL OFFSET_ipeomccsdt_x2_3_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_3_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_3_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k_
     &i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_3_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1
     &_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_3(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_o
     &ffset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_4_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_4_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_4_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ipeomccsdt_x2_4_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_4(d_x2,k_x2_offset,d_i1,k_i1_offset,d_i0,k_i0_o
     &ffset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL ipeomccsdt_x2_5(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i0,k_i0_o
     &ffset)
      CALL OFFSET_ipeomccsdt_x2_6_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_6_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ipeomccsdt_x2_6_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_6(d_x3,k_x3_offset,d_i1,k_i1_offset,d_i0,k_i0_o
     &ffset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_7_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_7_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ipeomccsdt_x2_7_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_7(d_x3,k_x3_offset,d_i1,k_i1_offset,d_i0,k_i0_o
     &ffset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL ipeomccsdt_x2_8(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i0,k_i0_o
     &ffset)
      CALL OFFSET_ipeomccsdt_x2_9_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_9_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_9_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL ipeomccsdt_x2_9_2(d_x2,k_x2_offset,d_f1,k_f1_offset,d_i1,k_i1
     &_offset)
      CALL ipeomccsdt_x2_9_3(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL ipeomccsdt_x2_9_4(d_x3,k_x3_offset,d_v2,k_v2_offset,d_i1,k_i1
     &_offset)
      CALL OFFSET_ipeomccsdt_x2_9_5_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_9_5_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_9_5_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_
     &i2_offset)
      CALL ipeomccsdt_x2_9_5_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i2,k_
     &i2_offset)
      CALL OFFSET_ipeomccsdt_x2_9_5_3_1(l_i3_offset,k_i3_offset,size_i3)
      CALL TCE_FILENAME('ipeomccsdt_x2_9_5_3_1_i3',filename)
      CALL CREATEFILE(filename,d_i3,size_i3)
      CALL ipeomccsdt_x2_9_5_3_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i3,
     &k_i3_offset)
      CALL RECONCILEFILE(d_i3,size_i3)
      CALL ipeomccsdt_x2_9_5_3(d_t1,k_t1_offset,d_i3,k_i3_offset,d_i2,k_
     &i2_offset)
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_9_5(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i1
     &_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_9_6_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_9_6_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_9_6_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k_
     &i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_9_6(d_t2,k_t2_offset,d_i2,k_i2_offset,d_i1,k_i1
     &_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_9(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_o
     &ffset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_10_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_10_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_10_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ipeomccsdt_x2_10_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL OFFSET_ipeomccsdt_x2_10_3_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_10_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_10_3_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_10_3(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_10_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_10_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_10_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_10_4(d_x2,k_x2_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_10(d_t1,k_t1_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_11_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_11_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_ipeomccsdt_x2_11_1_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_11_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_11_1_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ipeomccsdt_x2_11_1_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_11_1(d_x1,k_x1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL ipeomccsdt_x2_11_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_11(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_12_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_12_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_12_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ipeomccsdt_x2_12_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL OFFSET_ipeomccsdt_x2_12_3_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ipeomccsdt_x2_12_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ipeomccsdt_x2_12_3_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ipeomccsdt_x2_12_3(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_12(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_13_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_13_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_13_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ipeomccsdt_x2_13_2(d_x2,k_x2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_13(d_t2,k_t2_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      CALL OFFSET_ipeomccsdt_x2_14_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ipeomccsdt_x2_14_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ipeomccsdt_x2_14_1(d_x1,k_x1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ipeomccsdt_x2_14(d_t3,k_t3_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ipeomccsdt_x2',-
     &1,MA_ERR)
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xv + = 1 * Sum ( h5 ) * x ( h5 )_x * v ( h5 p3 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h5b
      INTEGER dummy_p4b_1
      INTEGER h5b_1
      INTEGER p3b_2
      INTEGER h5b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &v)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h5b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h5b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h5b,dummy_p4b_1,h5b_1)
      CALL TCE_RESTRICTED_4(p3b,h5b,h1b,h2b,p3b_2,h5b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_1',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_1',5,MA_ERR)
      IF ((h5b .le. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h2b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_1',6,MA_ER
     &R)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_1',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_1',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_1',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_1',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xf + = -1 * P( 2 ) * Sum ( h8 ) * x ( p3 h1 h8 )_x * i1 ( h8 h2 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h8b
      INTEGER p3b_1
      INTEGER dummy_p4b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h8b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &f)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h8b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,h1b,h8b,p3b_1,dummy_p4b_1,h1b_
     &1,h8b_1)
      CALL TCE_RESTRICTED_2(h8b,h2b,h8b_2,h2b_2)
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * 
     &int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2',2,MA_ERR)
      IF ((h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (p3b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),3,1,2,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h8b-1),2,1,3,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h8b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h2b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_2',6,MA_ER
     &R)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_2',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,1,2,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( h8 h1 )_f + = 1 * f ( h8 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h1b
      INTEGER dimc
      INTEGER h8b_1
      INTEGER h1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h1b-1)
      CALL TCE_RESTRICTED_2(h8b,h1b,h8b_1,h1b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + (noab+nvab) * (h8b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h8b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_2_1(l_a_offset,k_a_offset,size)
C     i1 ( h8 h1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h8b
      INTEGER h1b
      DOUBLE PRECISION size
      length = 0
      DO h8b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_2_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h8b = 1,noab
      DO h1b = 1,noab
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(h1b - 1 + noab * (h8b - 1))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h8b-1)) * dfloat(int_mb(k_rang
     &e+h1b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h8 h1 )_ft + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * i2 ( h8 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &f,irrep_t)) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p9b,h1b,p9b_1,h1b_1)
      CALL TCE_RESTRICTED_2(h8b,p9b,h8b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2_2',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h8b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_2_2',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h1b-1),1,2,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     i2 ( h8 p9 )_f + = 1 * f ( h8 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER p9b
      INTEGER dimc
      INTEGER h8b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_2(h8b,p9b,h8b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h8b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2_2_1',2,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h8b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2_2_1',4,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2_1
     &',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_2_2_1(l_a_offset,k_a_offset,size)
C     i2 ( h8 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h8b
      INTEGER p9b
      DOUBLE PRECISION size
      length = 0
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_2_2_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p9b - noab - 1 + nvab * (h8b - 1)
     &)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h8b-1)) * dfloat(int_mb(k_rang
     &e+p9b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     i2 ( h8 p9 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h8 p6 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h8b_2
      INTEGER h7b_2
      INTEGER p9b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h8b,h7b,p9b,p6b,h8b_2,h7b_2,p9b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2_2_2',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2_2',5,MA_ERR)
      IF ((h7b .le. h8b) .and. (p6b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p9b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h7b .le. h8b) .and. (p9b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p9b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF ((h8b .lt. h7b) .and. (p6b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p9b-1)
     &,4,1,2,3,-1.0d0,.false.)
      END IF
      IF ((h8b .lt. h7b) .and. (p9b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p9b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_2_2_2',6,M
     &A_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2_2
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2_2
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h8b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2_2_2',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_2_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h8 h1 )_vt + = -1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 h8 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h8b_2
      INTEGER h6b_2
      INTEGER h1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h6b,p5b_1,h6b_1)
      CALL TCE_RESTRICTED_4(h8b,h6b,h1b,p5b,h8b_2,h6b_2,h1b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2_3',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_3',5,MA_ERR)
      IF ((h6b .le. h8b) .and. (h1b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF ((h8b .lt. h6b) .and. (h1b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,3,1,2,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_2_3',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_3',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_3',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h8b-1),2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2_3',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h8 h1 )_vt + = -1/2 * Sum ( h7 p5 p6 ) * t ( p5 p6 h1 h7 )_t * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p6b
      INTEGER h7b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h8b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h1b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_4',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h7b,p5b_1,p6b_1,h1b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h8b,h7b,p5b,p6b,h8b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+h7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_4',2,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h7b-1)
     &,3,4,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_2_4',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_4',5,MA_ERR)
      IF ((h7b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,2,1,4,3,1.0d0,.false.)
      END IF
      IF ((h8b .lt. h7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,1,2,4,3,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_2_4',6,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_4',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_4',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_2_4',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h1b-1),1,2,-1.0d0/2.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_2_4',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_2_4',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xf + = 1 * Sum ( p8 ) * x ( p8 h1 h2 )_x * i1 ( p3 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p8b
      INTEGER dummy_p4b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p3b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &f)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p8b,h1b,h2b,dummy_p4b_1,p8b_1,h1b_
     &1,h2b_1)
      CALL TCE_RESTRICTED_2(p3b,p8b,p3b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1) * 
     &int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_3',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p8b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_3',6,MA_ER
     &R)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_3',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_3',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_3',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),1,3,2,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_3',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_3',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( p3 p8 )_f + = 1 * f ( p3 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p8b
      INTEGER dimc
      INTEGER p3b_1
      INTEGER p8b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p8b-1)
      CALL TCE_RESTRICTED_2(p3b,p8b,p3b_1,p8b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p8b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p8b_1
     & - 1 + (noab+nvab) * (p3b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p8b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_3_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+p3b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_3_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_3_1(l_a_offset,k_a_offset,size)
C     i1 ( p3 p8 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER p8b
      DOUBLE PRECISION size
      length = 0
      DO p3b = noab+1,noab+nvab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_3_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO p3b = noab+1,noab+nvab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p8b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p8b - noab - 1 + nvab * (p3b - no
     &ab - 1))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+p3b-1)) * dfloat(int_mb(k_rang
     &e+p8b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( p3 p8 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 p3 p5 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER p3b_2
      INTEGER h6b_2
      INTEGER p8b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h6b,p5b_1,h6b_1)
      CALL TCE_RESTRICTED_4(p3b,h6b,p8b,p5b,p3b_2,h6b_2,p8b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_3_2',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_2',5,MA_ERR)
      IF ((h6b .le. p3b) .and. (p5b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h6b .le. p3b) .and. (p8b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_3_2',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_2',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_2',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+p3b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_3_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( p3 p8 )_vt + = 1/2 * Sum ( h6 h7 p5 ) * t ( p3 p5 h6 h7 )_t * v ( h6 h7 p5 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &6b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h6b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h6b,h7b,p3b_1,p5b_1,h6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h6b,h7b,p8b,p5b,h6b_2,h7b_2,p8b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h7b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_3',2,MA_ERR)
      IF ((p5b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1)
     &,2,4,3,1,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1)
     &,1,4,3,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_3_3',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_3',5,MA_ERR)
      IF ((p5b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((p8b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_3_3',6,MA_
     &ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_3',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_3',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+p3b-1),2,1,1.0d0/2.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_3_3',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_3_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( p3 p8 )_vtt + = 1 * Sum ( h5 ) * t ( p3 h5 )_t * i2 ( h5 p8 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h5b
      INTEGER p3b_1
      INTEGER h5b_1
      INTEGER h5b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_4',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h5b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h5b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p3b,h5b,p3b_1,h5b_1)
      CALL TCE_RESTRICTED_2(h5b,p8b,h5b_2,p8b_2)
      dim_common = int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_4',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h5b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_3_4',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - noab - 1 + nvab * (h5b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p8b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_3_4',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_4',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_4',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_4',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+p3b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (p3b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_3_4',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_4',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_3_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     i2 ( h5 p8 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h5 h7 p6 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p8b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h5b_2
      INTEGER h7b_2
      INTEGER p8b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h5b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p8b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_4_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h5b,h7b,p8b,p6b,h5b_2,h7b_2,p8b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_4_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_3_4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_4_1',5,MA_ERR)
      IF ((h7b .lt. h5b) .and. (p6b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,2,1,3,-1.0d0,.false.)
      END IF
      IF ((h7b .lt. h5b) .and. (p8b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF ((h5b .le. h7b) .and. (p6b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1)
     &,4,1,2,3,1.0d0,.false.)
      END IF
      IF ((h5b .le. h7b) .and. (p8b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1)
     &,3,1,2,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1',6,M
     &A_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_3_4_1',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h5b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p8b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_3_4_1(l_a_offset,k_a_offset,size)
C     i2 ( h5 p8 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER p8b
      DOUBLE PRECISION size
      length = 0
      DO h5b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_3_4_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h5b = 1,noab
      DO p8b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p8b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p8b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p8b - noab - 1 + nvab * (h5b - 1)
     &)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h5b-1)) * dfloat(int_mb(k_rang
     &e+p8b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xv + = 1/2 * Sum ( h8 h9 ) * x ( p3 h8 h9 )_x * i1 ( h8 h9 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h8b
      INTEGER h9b
      INTEGER p3b_1
      INTEGER dummy_p4b_1
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &v)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h8b = 1,noab
      DO h9b = h8b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h8b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h8b-1),int_mb(k_sym+h9b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,h8b,h9b,p3b_1,dummy_p4b_1,h8b_
     &1,h9b_1)
      CALL TCE_RESTRICTED_4(h8b,h9b,h1b,h2b,h8b_2,h9b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_4',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h9b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (p3b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h9b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_4',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h9b_2 - 1 + noab * (h8b_2 - 1))
     &)))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_4',6,MA_ER
     &R)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h9b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_4',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_4',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_4',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0/2.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_4',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_4',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( h8 h9 h1 h2 )_v + = 1 * v ( h8 h9 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h9b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER h8b_1
      INTEGER h9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      CALL TCE_RESTRICTED_4(h8b,h9b,h1b,h2b,h8b_1,h9b_1,h1b_1,h2b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_4_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h9b_1 - 1 + (noab
     &+nvab) * (h8b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_4_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_4_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h9b-1),int_mb(k_range+h8b-1)
     &,4,3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h9b - 1 + noab * (h8b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_4_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_4_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_4_1(l_a_offset,k_a_offset,size)
C     i1 ( h8 h9 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h8b
      INTEGER h9b
      INTEGER h1b
      INTEGER h2b
      DOUBLE PRECISION size
      length = 0
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_4_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(h2b - 1 + noab * (h1b - 1 + noab 
     &* (h9b - 1 + noab * (h8b - 1))))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h8b-1)) * dfloat(int_mb(k_rang
     &e+h9b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k_range+
     &h2b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h8 h9 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * v ( h8 h9 h2 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h9b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h9b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h9b = h8b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h8b,h9b,h2b,p5b,h8b_2,h9b_2,h2b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h9b-1) * int_mb
     &(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_4_2',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_4_2',5,MA_ERR)
      IF ((h2b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h2b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_4_2',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_4_2',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_4_2',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_4_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h9b - 1 + noab * (h8b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,3,2,1,4,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h9b - 1 + noab * (h8b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_4_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_4_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xv + = -1 * P( 2 ) * Sum ( p6 h5 ) * x ( p6 h1 h5 )_x * v ( h5 p3 h2 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER h5b
      INTEGER dummy_p4b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h5b_1
      INTEGER p3b_2
      INTEGER h5b_2
      INTEGER h2b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &v)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_5',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p6b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p6b,h1b,h5b,dummy_p4b_1,p6b_1,h1b_
     &1,h5b_1)
      CALL TCE_RESTRICTED_4(p3b,h5b,h2b,p6b,p3b_2,h5b_2,h2b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h5b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_5',2,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h5b_1 - 1 + noab * (p6b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h1b-1),3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h5b-1),2,3,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_5',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_5',5,MA_ERR)
      IF ((h5b .le. p3b) .and. (h2b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_5',6,MA_ER
     &R)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_5',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_5',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_5',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),2,3,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),2,1,3,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_5',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_5',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xf + = -1 * Sum ( p9 h8 ) * x ( p3 p9 h1 h2 h8 )_x * i1 ( h8 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h8b
      INTEGER p3b_1
      INTEGER dummy_p4b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h8b_1
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &f)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h8b = 1,noab
      IF (int_mb(k_active+p3b-1)+int_mb(k_active+dummy_p4b-1)+int_mb(k_a
     &ctive+p9b-1) .ge. numact) THEN
      IF (int_mb(k_active+h1b-1)+int_mb(k_active+h2b-1)+int_mb(k_active+
     &h8b-1) .ge. numact) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+
     &p9b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spi
     &n+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p9b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-
     &1),int_mb(k_sym+h8b-1)))))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_6(p3b,dummy_p4b,p9b,h1b,h2b,h8b,p3b_1,dummy_p4
     &b_1,p9b_1,h1b_1,h2b_1,h8b_1)
      CALL TCE_RESTRICTED_2(h8b,p9b,h8b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * 
     &int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = 1
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_6',2,MA_ERR)
      IF ((p9b .lt. p3b) .and. (h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p3b_1 - noa
     &b - 1 + nvab * (p9b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),5,4,2,3,1,-1.0d0,.false.)
      END IF
      IF ((p9b .lt. p3b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noa
     &b - 1 + nvab * (p9b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h2b-1),5,3,2,4,1,1.0d0,.false.)
      END IF
      IF ((p9b .lt. p3b) .and. (h2b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noa
     &b - 1 + nvab * (p9b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h8b-1),4,3,2,5,1,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p9b) .and. (h8b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p9b_1 - noa
     &b - 1 + nvab * (p3b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),5,4,1,3,2,1.0d0,.false.)
      END IF
      IF ((p3b .le. p9b) .and. (h1b .le. h8b) .and. (h8b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noa
     &b - 1 + nvab * (p3b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h2b-1),5,3,1,4,2,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p9b) .and. (h2b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noa
     &b - 1 + nvab * (p3b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h8b-1),4,3,1,5,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_6',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_6',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h8b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_6',6,MA_ER
     &R)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_6',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_6',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_6',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_6',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_6',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( h8 p9 )_f + = 1 * f ( h8 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER p9b
      INTEGER dimc
      INTEGER h8b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_2(h8b,p9b,h8b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_6_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h8b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_6_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_6_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h8b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_6_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_6_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_6_1(l_a_offset,k_a_offset,size)
C     i1 ( h8 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h8b
      INTEGER p9b
      DOUBLE PRECISION size
      length = 0
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_6_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p9b - noab - 1 + nvab * (h8b - 1)
     &)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h8b-1)) * dfloat(int_mb(k_rang
     &e+p9b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h8 p9 )_vt + = 1 * Sum ( h6 p5 ) * t ( p5 h6 )_t * v ( h6 h8 p5 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER h6b
      INTEGER p5b_1
      INTEGER h6b_1
      INTEGER h8b_2
      INTEGER h6b_2
      INTEGER p9b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),int_mb(k_sym+p9b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h6b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h6b,p5b_1,h6b_1)
      CALL TCE_RESTRICTED_4(h8b,h6b,p9b,p5b,h8b_2,h6b_2,p9b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_6_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_6_2',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_6_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_6_2',5,MA_ERR)
      IF ((h6b .le. h8b) .and. (p5b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h6b .le. h8b) .and. (p9b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p9b-1),int_mb(k_range+p5b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF ((h8b .lt. h6b) .and. (p5b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1)
     &,4,1,2,3,-1.0d0,.false.)
      END IF
      IF ((h8b .lt. h6b) .and. (p9b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p9b-1),int_mb(k_range+p5b-1)
     &,3,1,2,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_6_2',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_6_2',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_6_2',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_6_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h8b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h8b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_6_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_6_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xv + = 1/2 * P( 2 ) * Sum ( p9 h8 h10 ) * x ( p3 p9 h1 h8 h10 )_x * i1 ( h8 h10 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h8b
      INTEGER h10b
      INTEGER p3b_1
      INTEGER dummy_p4b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h8b_1
      INTEGER h10b_1
      INTEGER h8b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &v)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h8b = 1,noab
      DO h10b = h8b,noab
      IF (int_mb(k_active+p3b-1)+int_mb(k_active+dummy_p4b-1)+int_mb(k_a
     &ctive+p9b-1) .ge. numact) THEN
      IF (int_mb(k_active+h1b-1)+int_mb(k_active+h8b-1)+int_mb(k_active+
     &h10b-1) .ge. numact) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+
     &p9b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spi
     &n+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p9b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h8b-
     &1),int_mb(k_sym+h10b-1)))))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_6(p3b,dummy_p4b,p9b,h1b,h8b,h10b,p3b_1,dummy_p
     &4b_1,p9b_1,h1b_1,h8b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h8b,h10b,h2b,p9b,h8b_2,h10b_2,h2b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h8b-1) * int_m
     &b(k_range+h10b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * 
     &int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_7',2,MA_ERR)
      IF ((p9b .lt. p3b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h8b_1 - 1 + noab * (p3b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),5,2,4,3,1,-1.0d0,.false.)
      END IF
      IF ((p9b .lt. p3b) .and. (h8b .lt. h1b) .and. (h1b .le. h10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p3b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),4,2,5,3,1,1.0d0,.false.)
      END IF
      IF ((p9b .lt. p3b) .and. (h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),3,2,5,4,1,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p9b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h8b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h8b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),5,1,4,3,2,1.0d0,.false.)
      END IF
      IF ((p3b .le. p9b) .and. (h8b .lt. h1b) .and. (h1b .le. h10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h8b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),4,1,5,3,2,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p9b) .and. (h1b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h8b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p3b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),3,1,5,4,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_7',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_7',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h8b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_7',6,MA_ER
     &R)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h8b .eq. h10b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_7',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_7',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_7',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0/2.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,1,2,-1.0d0/2.0d0,.f
     &alse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_7',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_7',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_7_1(d_a,k_a_offset,d_c,k_c_offset)
C     i1 ( h8 h10 h1 p9 )_v + = 1 * v ( h8 h10 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER h8b_1
      INTEGER h10b_1
      INTEGER h1b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h10b = h8b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_4(h8b,h10b,h1b,p9b,h8b_1,h10b_1,h1b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_7_1',1,MA_ERR)
      IF ((h1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 + (noa
     &b+nvab) * (h8b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-1
     &),4,3,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_7_1',2,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_7_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h10b-1),int_mb(k_range+h8b-1
     &),4,3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h8b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_7_1',4,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_7_1',
     &5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_7_1(l_a_offset,k_a_offset,size)
C     i1 ( h8 h10 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h8b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      DOUBLE PRECISION size
      length = 0
      DO h8b = 1,noab
      DO h10b = h8b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_7_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h8b = 1,noab
      DO h10b = h8b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p9b - noab - 1 + nvab * (h1b - 1 
     &+ noab * (h10b - 1 + noab * (h8b - 1))))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h8b-1)) * dfloat(int_mb(k_rang
     &e+h10b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k_range
     &+p9b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h8 h10 h1 p9 )_vt + = 1 * Sum ( p5 ) * t ( p5 h1 )_t * v ( h8 h10 p5 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h8b
      INTEGER h10b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h8b_2
      INTEGER h10b_2
      INTEGER p9b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h8b = 1,noab
      DO h10b = h8b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h8b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h8b,h10b,p9b,p5b,h8b_2,h10b_2,p9b_2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_7_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_7_2',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_7_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_7_2',5,MA_ERR)
      IF ((p5b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1
     &),4,2,1,3,1.0d0,.false.)
      END IF
      IF ((p9b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p5b-1
     &),3,2,1,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_7_2',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_7_2',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_7_2',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_7_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h8b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h8b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_7_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_7_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_xv + = 1/2 * Sum ( p6 p7 h5 ) * x ( p6 p7 h1 h2 h5 )_x * v ( h5 p3 p6 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER p7b
      INTEGER h5b
      INTEGER dummy_p4b_1
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h5b_1
      INTEGER p3b_2
      INTEGER h5b_2
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_x,irrep_
     &v)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_8',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_active+dummy_p4b-1)+int_mb(k_active+p6b-1)+int_mb(k_a
     &ctive+p7b-1) .ge. numact) THEN
      IF (int_mb(k_active+h1b-1)+int_mb(k_active+h2b-1)+int_mb(k_active+
     &h5b-1) .ge. numact) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+
     &p7b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spi
     &n+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p6b-1),ieor(i
     &nt_mb(k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-
     &1),int_mb(k_sym+h5b-1)))))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_6(dummy_p4b,p6b,p7b,h1b,h2b,h5b,dummy_p4b_1,p6
     &b_1,p7b_1,h1b_1,h2b_1,h5b_1)
      CALL TCE_RESTRICTED_4(p3b,h5b,p6b,p7b,p3b_2,h5b_2,p6b_2,p7b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+p7b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1) * 
     &int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_8',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_8',2,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h5b_1 - 1 + noab * (p7b_1 - noa
     &b - 1 + nvab * (p6b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h5b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),5,4,3,2,1,1.0d0,.false.)
      END IF
      IF ((h1b .le. h5b) .and. (h5b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h5b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noa
     &b - 1 + nvab * (p6b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h2b-1),5,3,4,2,1,-1.0d0,.false.)
      END IF
      IF ((h2b .le. h5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h5b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noa
     &b - 1 + nvab * (p6b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h5b-1),4,3,5,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_8',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_8',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_8',5,MA_ERR)
      IF ((h5b .le. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1)
     &,2,1,4,3,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_8',6,MA_ER
     &R)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p6b .eq. p7b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_8',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_8',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_8',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),1,3,2,1.0d0/2.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_8',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_8',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     i0 ( p3 h1 h2 )_vxt + = -1 * Sum ( h10 ) * t ( p3 h10 )_t * i1 ( h10 h1 h2 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h10b
      INTEGER p3b_1
      INTEGER h10b_1
      INTEGER dummy_p4b_2
      INTEGER h10b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h10b = 1,noab
      IF (int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p3b,h10b,p3b_1,h10b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h10b,h1b,h2b,dummy_p4b_2,h10b_2,h1
     &b_2,h2b_2)
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1) * 
     &int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p3b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h10b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h10b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9',6,MA_ER
     &R)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h10 h1 h2 )_vx + = 1 * Sum ( h6 ) * x ( h6 )_x * v ( h6 h10 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h6b
      INTEGER dummy_p4b_1
      INTEGER h6b_1
      INTEGER h10b_2
      INTEGER h6b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h6b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h6b,dummy_p4b_1,h6b_1)
      CALL TCE_RESTRICTED_4(h10b,h6b,h1b,h2b,h10b_2,h6b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h6b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_1',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_1',5,MA_ERR)
      IF ((h6b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h2b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(h2b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,1,2,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_1',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_1',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_1',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h10b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_1',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_1',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_9_1(l_a_offset,k_a_offset,size)
C     i1 ( h10 h1 h2 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_9_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(h2b - 1 + noab * (h1b - 1 + noab 
     &* (h10b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h10b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k
     &_range+h2b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h10 h1 h2 )_fx + = 1 * Sum ( p6 ) * x ( p6 h1 h2 )_x * f ( h10 p6 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER dummy_p4b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p6b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p6b,h1b,h2b,dummy_p4b_1,p6b_1,h1b_
     &1,h2b_1)
      CALL TCE_RESTRICTED_2(h10b,p6b,h10b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1) * 
     &int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_2',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h10b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p6b-1),1,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_2',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_2',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_2',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_2',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),1,3,2,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_2',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_2',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h10 h1 h2 )_vx + = -1 * P( 2 ) * Sum ( h6 p7 ) * x ( p7 h1 h6 )_x * v ( h6 h10 h2 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p7b
      INTEGER h6b
      INTEGER dummy_p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER h10b_2
      INTEGER h6b_2
      INTEGER h2b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p7b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p7b,h1b,h6b,dummy_p4b_1,p7b_1,h1b_
     &1,h6b_1)
      CALL TCE_RESTRICTED_4(h10b,h6b,h2b,p7b,h10b_2,h6b_2,h2b_2,p7b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_3',2,MA_ERR)
      IF ((h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p7b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),2,3,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_3',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_3',5,MA_ERR)
      IF ((h6b .le. h10b) .and. (h2b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p7b-1
     &),3,2,1,4,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h6b) .and. (h2b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (h2b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h6b-1),int_mb(k_range+h2b-1),int_mb(k_range+p7b-1
     &),3,1,2,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_3',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_3',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_3',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),2,3,1,-1.0d0,.false.
     &)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),2,1,3,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_3',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_3',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h10 h1 h2 )_vx + = 1/2 * Sum ( h6 p7 p8 ) * x ( p7 p8 h1 h2 h6 )_x * v ( h6 h10 p7 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p7b
      INTEGER p8b
      INTEGER h6b
      INTEGER dummy_p4b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h6b_1
      INTEGER h10b_2
      INTEGER h6b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_4',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_active+dummy_p4b-1)+int_mb(k_active+p7b-1)+int_mb(k_a
     &ctive+p8b-1) .ge. numact) THEN
      IF (int_mb(k_active+h1b-1)+int_mb(k_active+h2b-1)+int_mb(k_active+
     &h6b-1) .ge. numact) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+
     &p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spi
     &n+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(i
     &nt_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-
     &1),int_mb(k_sym+h6b-1)))))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_6(dummy_p4b,p7b,p8b,h1b,h2b,h6b,dummy_p4b_1,p7
     &b_1,p8b_1,h1b_1,h2b_1,h6b_1)
      CALL TCE_RESTRICTED_4(h10b,h6b,p7b,p8b,h10b_2,h6b_2,p7b_2,p8b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_m
     &b(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1) * 
     &int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_4',2,MA_ERR)
      IF ((h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h6b_1 - 1 + noab * (p8b_1 - noa
     &b - 1 + nvab * (p7b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),5,4,3,2,1,1.0d0,.false.)
      END IF
      IF ((h1b .le. h6b) .and. (h6b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noa
     &b - 1 + nvab * (p7b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h2b-1),5,3,4,2,1,-1.0d0,.false.)
      END IF
      IF ((h2b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noa
     &b - 1 + nvab * (p7b_1 - noab - 1))))))
      CALL TCE_SORT_5(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h6b-1),4,3,5,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_4',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_4',5,MA_ERR)
      IF ((h6b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p7b-1),int_mb(k_range+p8b-1
     &),2,1,4,3,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h6b-1),int_mb(k_range+p7b-1),int_mb(k_range+p8b-1
     &),1,2,4,3,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_4',6,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p7b .eq. p8b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_4',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_4',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_4',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),1,3,2,1.0d0/2.0d0,.f
     &alse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_4',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_4',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h10 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p6 ) * t ( p6 h1 )_t * i2 ( h10 h2 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER dummy_p4b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(
     &irrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h10b,h2b,p6b,dummy_p4b_2,h10b_2,h2
     &b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) *
     & int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_5',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+p6b-1),2,1,3,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_5',6,MA_
     &ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),2,3,1,-1.0d0,.false.
     &)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),2,1,3,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h10b - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_5',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_5_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     i2 ( h10 h1 p6 )_vx + = 1 * Sum ( h7 ) * x ( h7 )_x * v ( h7 h10 h1 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER h1b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h7b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h7b,dummy_p4b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,h1b,p6b,h10b_2,h7b_2,h1b_2,p6b_2)
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h7b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_1',5,MA_ERR)
      IF ((h7b .le. h10b) .and. (h1b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1
     &),4,3,2,1,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h7b) .and. (h1b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1
     &),4,3,1,2,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1',6,M
     &A_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h10b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_9_5_1(l_a_offset,k_a_offset,size)
C     i2 ( h10 h1 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER p6b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_9_5_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p6b - noab - 1 + nvab * (h1b - 1 
     &+ noab * (h10b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h10b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k
     &_range+p6b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     i2 ( h10 h1 p6 )_vx + = -1 * Sum ( h7 p8 ) * x ( p8 h1 h7 )_x * v ( h7 h10 p6 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p8b
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h10b_2
      INTEGER h7b_2
      INTEGER p6b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p8b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p8b,h1b,h7b,dummy_p4b_1,p8b_1,h1b_
     &1,h7b_1)
      CALL TCE_RESTRICTED_4(h10b,h7b,p6b,p8b,h10b_2,h7b_2,p6b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_2',2,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p8b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h1b-1),3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h7b-1),2,3,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_5_2',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_2',5,MA_ERR)
      IF ((h7b .le. h10b) .and. (p8b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1
     &),4,2,1,3,-1.0d0,.false.)
      END IF
      IF ((h7b .le. h10b) .and. (p6b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1
     &),3,2,1,4,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h7b) .and. (p8b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p6b-1
     &),4,1,2,3,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h7b) .and. (p6b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p8b-1
     &),3,1,2,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_5_2',6,M
     &A_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_2
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_2
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_2',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),2,3,1,-1.0d0,.false.
     &)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_5_2',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     i2 ( h10 h1 p6 )_vxt + = 1/2 * Sum ( p7 ) * t ( p7 h1 )_t * i3 ( h10 p6 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER dummy_p4b_2
      INTEGER h10b_2
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,ieor(
     &irrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p7b,h1b,p7b_1,h1b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h10b,p6b,p7b,dummy_p4b_2,h10b_2,p6
     &b_2,p7b_2)
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) *
     & int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p7b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_3',5,MA_ERR)
      IF ((p7b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - noab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h10b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),3,1,2,-1.0d0,.false.
     &)
      END IF
      IF ((p6b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - noab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (h10b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),2,1,3,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3',6,M
     &A_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_3',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),2,3,1,1.0d0/2.0d0,.f
     &alse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_5_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     i3 ( h10 p6 p7 )_vx + = -1 * Sum ( h8 ) * x ( h8 )_x * v ( h8 h10 p6 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER p6b
      INTEGER p7b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h8b
      INTEGER dummy_p4b_1
      INTEGER h8b_1
      INTEGER h10b_2
      INTEGER h8b_2
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+p6b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+p6b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+p6b-1) * int_mb(k_range+p7b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h8b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h8b,dummy_p4b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h10b,h8b,p6b,p7b,h10b_2,h8b_2,p6b_2,p7b_2)
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_3_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',3
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_3_1',5,MA_ERR)
      IF ((h8b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1
     &),4,3,2,1,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p7b-1
     &),4,3,1,2,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',6
     &,MA_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3
     &_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3
     &_1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_5_3_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h10b-1),3,2,1,-1.0d0,.false.
     &)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p7b -
     & noab - 1 + nvab * (p6b - noab - 1 + nvab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_9_5_3_1(l_a_offset,k_a_offset,size
     &)
C     i3 ( h10 p6 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER p6b
      INTEGER p7b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+p6b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+p6b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_9_5_3_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+p6b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+p6b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p7b - noab - 1 + nvab * (p6b - no
     &ab - 1 + nvab * (h10b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h10b-1)) * dfloat(int_mb(k_range+p6b-1)) * dfloat(int_mb(k
     &_range+p7b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     i1 ( h10 h1 h2 )_vxt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * i2 ( h10 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dummy_p4b_2
      INTEGER h10b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(
     &irrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_6',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h10b,p5b,p6b,dummy_p4b_2,h10b_2,p5
     &b_2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_6',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_6',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_6',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - noab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h10b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_6',6,MA_
     &ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_6',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_6',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_6',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),1,3,2,1.0d0/2.0d0,.f
     &alse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_6',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_6',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_9_6_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     i2 ( h10 p5 p6 )_vx + = 1 * Sum ( h8 ) * x ( h8 )_x * v ( h8 h10 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER p5b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h8b
      INTEGER dummy_p4b_1
      INTEGER h8b_1
      INTEGER h10b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k
     &_spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h10b-1),ieor(
     &int_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h10b-1) * int_
     &mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_6_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h8b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h8b,dummy_p4b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h10b,h8b,p5b,p6b,h10b_2,h8b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p5b-1) * int_m
     &b(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_6_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_6_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_9_6_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_6_1',5,MA_ERR)
      IF ((h8b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),4,3,2,1,1.0d0,.false.)
      END IF
      IF ((h10b .lt. h8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1
     &),4,3,1,2,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1',6,M
     &A_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_9_6_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h10b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (p5b - noab - 1 + nvab * (h10b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_9_6_1(l_a_offset,k_a_offset,size)
C     i2 ( h10 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h10b
      INTEGER p5b
      INTEGER p6b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_9_6_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h10b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k
     &_spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(
     &int_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep
     &_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+dumm
     &y_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p6b - noab - 1 + nvab * (p5b - no
     &ab - 1 + nvab * (h10b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h10b-1)) * dfloat(int_mb(k_range+p5b-1)) * dfloat(int_mb(k
     &_range+p6b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i0 ( p3 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( p5 ) * t ( p5 h1 )_t * i1 ( p3 h2 p5 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER dummy_p4b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p5b,h1b,p5b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,h2b,p5b,p3b_2,dummy_p4b_2,h2b_
     &2,p5b_2)
      dim_common = int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * 
     &int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (p3b_2 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+p5b-1),2,1,3,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),2,3,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),2,1,3,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p3 h1 p5 )_vx + = 1 * Sum ( h6 ) * x ( h6 )_x * v ( h6 p3 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h6b
      INTEGER dummy_p4b_1
      INTEGER h6b_1
      INTEGER p3b_2
      INTEGER h6b_2
      INTEGER h1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h6b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h6b,dummy_p4b_1,h6b_1)
      CALL TCE_RESTRICTED_4(p3b,h6b,h1b,p5b,p3b_2,h6b_2,h1b_2,p5b_2)
      dim_common = int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h6b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_1',5,MA_ERR)
      IF ((h6b .le. p3b) .and. (h1b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,4,3,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10_1',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_10_1(l_a_offset,k_a_offset,size)
C     i1 ( p3 h1 p5 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER p5b
      DOUBLE PRECISION size
      length = 0
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_10_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p5b - noab - 1 + nvab * (h1b - 1 
     &+ noab * (p3b - noab - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+p3b-1)) * dfloat(int_mb(k_rang
     &e+dummy_p4b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k_
     &range+p5b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p3 h1 p5 )_vx + = -1 * Sum ( h6 p7 ) * x ( p7 h1 h6 )_x * v ( h6 p3 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p7b
      INTEGER h6b
      INTEGER dummy_p4b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER p3b_2
      INTEGER h6b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p7b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p7b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p7b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p7b,h1b,h6b,dummy_p4b_1,p7b_1,h1b_
     &1,h6b_1)
      CALL TCE_RESTRICTED_4(p3b,h6b,p5b,p7b,p3b_2,h6b_2,p5b_2,p7b_2)
      dim_common = int_mb(k_range+p7b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_2',2,MA_ERR)
      IF ((h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p7b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),2,3,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_2',5,MA_ERR)
      IF ((h6b .le. p3b) .and. (p7b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p7b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p7b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,-1.0d0,.false.)
      END IF
      IF ((h6b .le. p3b) .and. (p5b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p7b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10_2',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_2',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),2,3,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p3 h1 p5 )_vxt + = 1/2 * Sum ( p6 ) * t ( p6 h1 )_t * i2 ( p3 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p3b_2
      INTEGER dummy_p4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,p5b,p6b,p3b_2,dummy_p4b_2,p5b_
     &2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * 
     &int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_3',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (p6b_2 - noab - 1 + nvab * (p3b_2 - noab - 1)
     &)))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),3,1,2,-1.0d0,.false.)
      END IF
      IF ((p5b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - noab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p3b_2 - noab - 1)
     &)))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),2,1,3,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10_3',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_3',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),2,3,1,1.0d0/2.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     i2 ( p3 p5 p6 )_vx + = -1 * Sum ( h7 ) * x ( h7 )_x * v ( h7 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER p5b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER h7b_1
      INTEGER p3b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_3_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h7b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h7b,dummy_p4b_1,h7b_1)
      CALL TCE_RESTRICTED_4(p3b,h7b,p5b,p6b,p3b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_3_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_3_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h7b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10_3_1',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_3_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_3_1',5,MA_ERR)
      IF ((h7b .le. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,4,3,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10_3_1',6,
     &MA_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_3_
     &1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_3_
     &1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_3_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (p5b - noab - 1 + nvab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10_3_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_3_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_10_3_1(l_a_offset,k_a_offset,size)
C     i2 ( p3 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER p5b
      INTEGER p6b
      DOUBLE PRECISION size
      length = 0
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_10_3_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p6b - noab - 1 + nvab * (p5b - no
     &ab - 1 + nvab * (p3b - noab - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+p3b-1)) * dfloat(int_mb(k_rang
     &e+dummy_p4b-1)) * dfloat(int_mb(k_range+p5b-1)) * dfloat(int_mb(k_
     &range+p6b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p3 h1 p5 )_vtx + = 1/4 * Sum ( h7 h8 ) * x ( p3 h7 h8 )_x * i2 ( h7 h8 h1 p5 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER h8b
      INTEGER p3b_1
      INTEGER dummy_p4b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_t,irrep_x))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_4',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,h7b,h8b,p3b_1,dummy_p4b_1,h7b_
     &1,h8b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,h1b,p5b,h7b_2,h8b_2,h1b_2,p5b_2)
      dim_common = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_4',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h8b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h1b_2 - 1 + noab * (h8b_2 - 1 + noab * (h7b_
     &2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,4,3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10_4',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_4',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0/4.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_10_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     i2 ( h7 h8 h1 p5 )_vt + = -1 * Sum ( p6 ) * t ( p6 h1 )_t * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      dimc = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_4_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h1b,p6b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p5b,p6b,h7b_2,h8b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_4_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_10_4_1',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_10_4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_4_1',5,MA_ERR)
      IF ((p6b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,-1.0d0,.false.)
      END IF
      IF ((p5b .le. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,3,2,1,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_10_4_1',6,
     &MA_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_4_
     &1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_4_
     &1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_10_4_1',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h1b-1)
     &,3,2,4,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h8b - 1 + noab * (h7b - 1)))
     &))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_10_4_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_10_4_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_10_4_1(l_a_offset,k_a_offset,size)
C     i2 ( h7 h8 h1 p5 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h7b
      INTEGER h8b
      INTEGER h1b
      INTEGER p5b
      DOUBLE PRECISION size
      length = 0
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_10_4_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_t)) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p5b - noab - 1 + nvab * (h1b - 1 
     &+ noab * (h8b - 1 + noab * (h7b - 1))))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h7b-1)) * dfloat(int_mb(k_rang
     &e+h8b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k_range+
     &p5b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i0 ( p3 h1 h2 )_fxt + = -1 * Sum ( p10 ) * t ( p3 p10 h1 h2 )_t * i1 ( p10 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p3b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dummy_p4b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p10b,h1b,h2b,p3b_1,p10b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_2(dummy_p4b,p10b,dummy_p4b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_11',2,MA_ERR)
      IF ((p10b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p10b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p3b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,1,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_11',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_11',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p10b_
     &2 - noab - 1))
      CALL TCE_SORT_1(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p10b-1
     &),1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_11',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_11',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_11',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_11',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_11',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_11',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_11_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p10 )_fx + = 1 * Sum ( h9 ) * x ( h9 )_x * i2 ( h9 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h9b
      INTEGER dummy_p4b_1
      INTEGER h9b_1
      INTEGER h9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p10b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+p10b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+p10b-1)) .eq. ieor
     &(irrep_f,irrep_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+p10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h9b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h9b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h9b,dummy_p4b_1,h9b_1)
      CALL TCE_RESTRICTED_2(h9b,p10b,h9b_2,p10b_2)
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h9b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h9b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_11_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (h9b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p10b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_11_1',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p10b 
     &- noab - 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_11_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_11_1(l_a_offset,k_a_offset,size)
C     i1 ( p10 )_fx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER p10b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+p10b-1)) .eq. ieor
     &(irrep_f,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+p10b-1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_11_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+p10b-1)) .eq. ieor
     &(irrep_f,irrep_x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+p10b-1).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p10b - noab - 1)
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+p10b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_11_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     i2 ( h9 p10 )_f + = 1 * f ( h9 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER p10b
      INTEGER dimc
      INTEGER h9b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h9b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) T
     &HEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+p10b-1)
      CALL TCE_RESTRICTED_2(h9b,p10b,h9b_1,p10b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h9b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(p10b_
     &1 - 1 + (noab+nvab) * (h9b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p10b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_11_1_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+h9b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_11_1_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_11_1_1(l_a_offset,k_a_offset,size)
C     i2 ( h9 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER p10b
      DOUBLE PRECISION size
      length = 0
      DO h9b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_11_1_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO h9b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p10b - noab - 1 + nvab * (h9b - 1
     &))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+h9b-1)) * dfloat(int_mb(k_rang
     &e+p10b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_11_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     i2 ( h9 p10 )_vt + = 1 * Sum ( h7 p6 ) * t ( p6 h7 )_t * v ( h7 h9 p6 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER p10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p6b
      INTEGER h7b
      INTEGER p6b_1
      INTEGER h7b_1
      INTEGER h9b_2
      INTEGER h7b_2
      INTEGER p10b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h9b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+p10b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h9b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),int_mb(k_sym+p10b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+p10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p6b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+p6b-1),int_mb(k_sym+h7b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p6b,h7b,p6b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h9b,h7b,p10b,p6b,h9b_2,h7b_2,p10b_2,p6b_2)
      dim_common = int_mb(k_range+p6b-1) * int_mb(k_range+h7b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (p6b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h7b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_11_1_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1_2',5,MA_ERR)
      IF ((h7b .le. h9b) .and. (p6b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p6b-1),int_mb(k_range+p10b-1
     &),4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h7b .le. h9b) .and. (p10b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h9b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p6b-1
     &),3,2,1,4,-1.0d0,.false.)
      END IF
      IF ((h9b .lt. h7b) .and. (p6b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p6b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p6b-1),int_mb(k_range+p10b-1
     &),4,1,2,3,-1.0d0,.false.)
      END IF
      IF ((h9b .lt. h7b) .and. (p10b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noa
     &b+nvab) * (h9b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p10b-1),int_mb(k_range+p6b-1
     &),3,1,2,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_11_1_2',6,
     &MA_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_1_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+h9b-1),2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (h9b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_11_1_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_1_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_11_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p10 )_vx + = 1/2 * Sum ( h6 h7 p8 ) * x ( p8 h6 h7 )_x * v ( h6 h7 p8 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p8b
      INTEGER h6b
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER p8b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p10b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p10b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+p10b-1).ne.4)) THEN
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+p10b-1)) .eq. ieor
     &(irrep_v,irrep_x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+p10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p8b = noab+1,noab+nvab
      DO h6b = 1,noab
      DO h7b = h6b,noab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_
     &spin+h6b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(i
     &nt_mb(k_sym+h6b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p8b,h6b,h7b,dummy_p4b_1,p8b_1,h6b_
     &1,h7b_1)
      CALL TCE_RESTRICTED_4(h6b,h7b,p10b,p8b,h6b_2,h7b_2,p10b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p8b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_11_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_11_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_2',5,MA_ERR)
      IF ((p8b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noa
     &b+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p10b-1
     &),4,2,1,3,1.0d0,.false.)
      END IF
      IF ((p10b .lt. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noa
     &b+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p10b-1),int_mb(k_range+p8b-1
     &),3,2,1,4,-1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_11_2',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h6b .eq. h7b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_11_2',9,MA_ERR)
      CALL TCE_SORT_1(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),1,1.0d0/2.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p10b 
     &- noab - 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_11_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_11_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_12(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i0 ( p3 h1 h2 )_vxt + = -1 * P( 2 ) * Sum ( h6 p5 ) * t ( p3 p5 h1 h6 )_t * i1 ( h6 h2 p5 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER h6b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER h1b_1
      INTEGER h6b_1
      INTEGER dummy_p4b_2
      INTEGER h6b_2
      INTEGER h2b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO h6b = 1,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h6b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p3b,p5b,h1b,h6b,p3b_1,p5b_1,h1b_1,h6b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h6b,h2b,p5b,dummy_p4b_2,h6b_2,h2b_
     &2,p5b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_12',2,MA_ERR)
      IF ((p5b .lt. p3b) .and. (h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,4,2,3,1,1.0d0,.false.)
      END IF
      IF ((p5b .lt. p3b) .and. (h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,3,2,4,1,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p5b) .and. (h6b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h6b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h1b-1)
     &,4,1,3,2,-1.0d0,.false.)
      END IF
      IF ((p3b .le. p5b) .and. (h1b .le. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p3b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h6b-1)
     &,3,1,4,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_12',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_12',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h6b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+p5b-1),2,1,3,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_12',6,MA_E
     &RR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_12',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_12',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_12',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,1,2,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (p3b - noab - 1))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_12',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_12',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_12_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( h6 h1 p5 )_vx + = -1 * Sum ( h7 ) * x ( h7 )_x * v ( h6 h7 h1 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER h7b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h1b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h6b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h7b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h7b,dummy_p4b_1,h7b_1)
      CALL TCE_RESTRICTED_4(h6b,h7b,h1b,p5b,h6b_2,h7b_2,h1b_2,p5b_2)
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h7b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_12_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_1',5,MA_ERR)
      IF ((h7b .lt. h6b) .and. (h1b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((h6b .le. h7b) .and. (h1b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1)
     &,4,3,1,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_12_1',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h6b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h6b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_12_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_12_1(l_a_offset,k_a_offset,size)
C     i1 ( h6 h1 p5 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_12_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p5b - noab - 1 + nvab * (h1b - 1 
     &+ noab * (h6b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h6b-1)) * dfloat(int_mb(k_range+h1b-1)) * dfloat(int_mb(k_
     &range+p5b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_12_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( h6 h1 p5 )_vx + = 1 * Sum ( h7 p8 ) * x ( p8 h1 h7 )_x * v ( h6 h7 p5 p8 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p8b
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER p8b_1
      INTEGER h1b_1
      INTEGER h7b_1
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p8b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h6b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p8b = noab+1,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+p8b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+p8b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h7b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(dummy_p4b,p8b,h1b,h7b,dummy_p4b_1,p8b_1,h1b_
     &1,h7b_1)
      CALL TCE_RESTRICTED_4(h6b,h7b,p5b,p8b,h6b_2,h7b_2,p5b_2,p8b_2)
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_2',2,MA_ERR)
      IF ((h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p8b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h1b-1),3,2,1,-1.0d0,.false.)
      END IF
      IF ((h1b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p8b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h7b-1),2,3,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_12_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_2',5,MA_ERR)
      IF ((h7b .lt. h6b) .and. (p8b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p8b-1),int_mb(k_range+p5b-1)
     &,4,2,1,3,1.0d0,.false.)
      END IF
      IF ((h7b .lt. h6b) .and. (p5b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p5b-1),int_mb(k_range+p8b-1)
     &,3,2,1,4,-1.0d0,.false.)
      END IF
      IF ((h6b .le. h7b) .and. (p8b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p8b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p8b-1),int_mb(k_range+p5b-1)
     &,4,1,2,3,-1.0d0,.false.)
      END IF
      IF ((h6b .le. h7b) .and. (p5b .le. p8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p8b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p8b-1)
     &,3,1,2,4,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_12_2',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_2',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),2,3,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h6b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_12_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_12_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( h6 h1 p5 )_vxt + = 1 * Sum ( p7 ) * t ( p7 h1 )_t * i2 ( h6 p5 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h6b
      INTEGER h1b
      INTEGER p5b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p7b
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER dummy_p4b_2
      INTEGER h6b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO h1b = 1,noab
      DO p5b = noab+1,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p5b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+p5b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h6b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+p5b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p5b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_3',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p7b = noab+1,noab+nvab
      IF (int_mb(k_spin+p7b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p7b,h1b,p7b_1,h1b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h6b,p5b,p7b,dummy_p4b_2,h6b_2,p5b_
     &2,p7b_2)
      dim_common = int_mb(k_range+p7b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h6b-1) * 
     &int_mb(k_range+p5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p7b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_12_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_3',5,MA_ERR)
      IF ((p7b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p5b_2
     & - noab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (h6b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+p5b-1),3,1,2,-1.0d0,.false.)
      END IF
      IF ((p5b .le. p7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - noab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h6b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p7b-1),2,1,3,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_12_3',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_3',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h1b-1),2,3,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p5b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h6b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_12_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_12_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     i2 ( h6 p5 p7 )_vx + = 1 * Sum ( h8 ) * x ( h8 )_x * v ( h6 h8 p5 p7 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h6b
      INTEGER p5b
      INTEGER p7b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h8b
      INTEGER dummy_p4b_1
      INTEGER h8b_1
      INTEGER h6b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p7b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p7b = p5b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h6b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h6b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h6b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p7b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_3_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h8b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h8b,dummy_p4b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h6b,h8b,p5b,p7b,h6b_2,h8b_2,p5b_2,p7b_2)
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h6b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p7b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_3_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_3_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_12_3_1',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_12_3_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_3_1',5,MA_ERR)
      IF ((h8b .lt. h6b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p5b-1),int_mb(k_range+p7b-1)
     &,4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((h6b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p7b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h6b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p7b-1)
     &,4,3,1,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_12_3_1',6,
     &MA_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_3_
     &1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_3_
     &1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_12_3_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h6b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p7b -
     & noab - 1 + nvab * (p5b - noab - 1 + nvab * (h6b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_12_3_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_12_3_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_12_3_1(l_a_offset,k_a_offset,size)
C     i2 ( h6 p5 p7 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h6b
      INTEGER p5b
      INTEGER p7b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p7b = p5b,noab+nvab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_12_3_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h6b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p7b = p5b,noab+nvab
      IF (int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p7b-1)) THEN
      IF (ieor(int_mb(k_sym+h6b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p7b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h6b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p7b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p7b - noab - 1 + nvab * (p5b - no
     &ab - 1 + nvab * (h6b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h6b-1)) * dfloat(int_mb(k_range+p5b-1)) * dfloat(int_mb(k_
     &range+p7b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_13(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i0 ( p3 h1 h2 )_vxt + = 1/2 * Sum ( p5 p6 ) * t ( p5 p6 h1 h2 )_t * i1 ( p3 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p6b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p3b_2
      INTEGER dummy_p4b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h2b,p5b_1,p6b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,p5b,p6b,p3b_2,dummy_p4b_2,p5b_
     &2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_13',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_13',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_13',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - noab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (p3b_2 - noab - 1)
     &)))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_13',6,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_13',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_13',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_13',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),1,3,2,1.0d0/2.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_13',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_13',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_13_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p3 p5 p6 )_vx + = 1 * Sum ( h7 ) * x ( h7 )_x * v ( h7 p3 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER p3b
      INTEGER p5b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER dummy_p4b_1
      INTEGER h7b_1
      INTEGER p3b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO p3b = noab+1,noab+nvab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h7b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h7b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h7b,dummy_p4b_1,h7b_1)
      CALL TCE_RESTRICTED_4(p3b,h7b,p5b,p6b,p3b_2,h7b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+h7b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_13_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h7b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_13_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_13_1',5,MA_ERR)
      IF ((h7b .le. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,4,3,2,1,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_13_1',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_13_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_13_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_13_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (p5b - noab - 1 + nvab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_13_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_13_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_13_1(l_a_offset,k_a_offset,size)
C     i1 ( p3 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER p5b
      INTEGER p6b
      DOUBLE PRECISION size
      length = 0
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_13_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p6b - noab - 1 + nvab * (p5b - no
     &ab - 1 + nvab * (p3b - noab - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+p3b-1)) * dfloat(int_mb(k_rang
     &e+dummy_p4b-1)) * dfloat(int_mb(k_range+p5b-1)) * dfloat(int_mb(k_
     &range+p6b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_13_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( p3 p5 p6 )_vx + = 1/2 * Sum ( h7 h8 ) * x ( p3 h7 h8 )_x * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h7b
      INTEGER h8b
      INTEGER p3b_1
      INTEGER dummy_p4b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13_2',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h7b = 1,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h7b-1),int_mb(k_sym+h8b-1)))) .eq. irrep_x) THEN
      CALL TCE_RESTRICTED_4(p3b,dummy_p4b,h7b,h8b,p3b_1,dummy_p4b_1,h7b_
     &1,h8b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p5b,p6b,h7b_2,h8b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_13_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noab - 1))))
      CALL TCE_SORT_3(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h8b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_13_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_13_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_13_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,4,3,2,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_13_2',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h7b .eq. h8b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_13_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_13_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_13_2',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p3b-1),3,2,1,1.0d0/2.0d0,.fa
     &lse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (p5b - noab - 1 + nvab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_13_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_13_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_14(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     i0 ( p3 h1 h2 )_vxt + = -1/2 * Sum ( h7 p5 p6 ) * t ( p3 p5 p6 h1 h2 h7 )_t * i1 ( h7 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p3b
      INTEGER dummy_p4b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p5b
      INTEGER p6b
      INTEGER h7b
      INTEGER p3b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h7b_1
      INTEGER dummy_p4b_2
      INTEGER h7b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      DOUBLE PRECISION FACTORIAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p3b = noab+1,noab+nvab
      DO dummy_p4b = dummy,dummy
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,ieor(i
     &rrep_x,irrep_t))) THEN
      dimc = int_mb(k_range+p3b-1) * int_mb(k_range+dummy_p4b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_14',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h7b = 1,noab
      IF (int_mb(k_active+p3b-1)+int_mb(k_active+p5b-1)+int_mb(k_active+
     &p6b-1) .ge. numact) THEN
      IF (int_mb(k_active+h1b-1)+int_mb(k_active+h2b-1)+int_mb(k_active+
     &h7b-1) .ge. numact) THEN
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(
     &k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h7b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p3b,p5b,p6b,h1b,h2b,h7b,p3b_1,p5b_1,p6b_1,h1
     &b_1,h2b_1,h7b_1)
      CALL TCE_RESTRICTED_4(dummy_p4b,h7b,p5b,p6b,dummy_p4b_2,h7b_2,p5b_
     &2,p6b_2)
      dim_common = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+h7b-1)
      dima_sort = int_mb(k_range+p3b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+dummy_p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_14',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_14',2,MA_ERR)
      IF ((p6b .lt. p3b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab * (p3b_1 - noa
     &b - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p3b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,4,2,1,1.0d0,.fa
     &lse.)
      END IF
      IF ((p6b .lt. p3b) .and. (h1b .le. h7b) .and. (h7b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noa
     &b - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h2b-1),6,4,3,5,2,1,-1.0d0,.f
     &alse.)
      END IF
      IF ((p6b .lt. p3b) .and. (h2b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p3b_1 - noa
     &b - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p3b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h7b-1),5,4,3,6,2,1,1.0d0,.fa
     &lse.)
      END IF
      IF ((p5b .lt. p3b) .and. (p3b .le. p6b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,2,4,3,1,-1.0d0,.f
     &alse.)
      END IF
      IF ((p5b .lt. p3b) .and. (p3b .le. p6b) .and. (h1b .le. h7b) .and.
     & (h7b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h2b-1),6,4,2,5,3,1,1.0d0,.fa
     &lse.)
      END IF
      IF ((p5b .lt. p3b) .and. (p3b .le. p6b) .and. (h2b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h7b-1),5,4,2,6,3,1,-1.0d0,.f
     &alse.)
      END IF
      IF ((p3b .le. p5b) .and. (h7b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h7b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,1,4,3,2,1.0d0,.fa
     &lse.)
      END IF
      IF ((p3b .le. p5b) .and. (h1b .le. h7b) .and. (h7b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h7b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h2b-1),6,4,1,5,3,2,-1.0d0,.f
     &alse.)
      END IF
      IF ((p3b .le. p5b) .and. (h2b .le. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h7b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p3b_1 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h7b-1),5,4,1,6,3,2,1.0d0,.fa
     &lse.)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_14',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_14',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_14',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - noab - 1 + nvab * (p5b_2 - noab - 1 + nvab * (h7b_2 - 1))))
      CALL TCE_SORT_3(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),1,3,2,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_14',6,MA_E
     &RR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p5b .eq. p6b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTOR
     &IAL(nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,
     &dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_14',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_14',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_14',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+p3b-1),3,2,1,-1.0d0/2.0d0,.f
     &alse.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (p3b - noab - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_14',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_14',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ipeomccsdt_x2_14_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     i1 ( h7 p5 p6 )_vx + = -1 * Sum ( h8 ) * x ( h8 )_x * v ( h7 h8 p5 p6 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER dummy_p4b
      INTEGER h7b
      INTEGER p5b
      INTEGER p6b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h8b
      INTEGER dummy_p4b_1
      INTEGER h8b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      INTEGER NXTVAL
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO dummy_p4b = dummy,dummy
      DO h7b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (next .eq. count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin
     &+h7b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      IF (int_mb(k_spin+dummy_p4b-1)+int_mb(k_spin+h7b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),ieor(int_mb(k_sym+h7b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      dimc = int_mb(k_range+dummy_p4b-1) * int_mb(k_range+h7b-1) * int_m
     &b(k_range+p5b-1) * int_mb(k_range+p6b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c_sort,k_c_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_14_1',0,MA_ERR)
      CALL DFILL(two*dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h8b = 1,noab
      IF (int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+dummy_p4b-1),int_mb(k_sym+h8b-1)) .eq. irrep
     &_x) THEN
      CALL TCE_RESTRICTED_2(dummy_p4b,h8b,dummy_p4b_1,h8b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p5b,p6b,h7b_2,h8b_2,p5b_2,p6b_2)
      dim_common = int_mb(k_range+h8b-1)
      dima_sort = int_mb(k_range+dummy_p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+p5b-1) * int_mb
     &(k_range+p6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a_sort,k_a_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_14_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dima,'noname',l_a,k_a)) CALL ERRQU
     &IT('ipeomccsdt_x2_14_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,dbl_mb(k_a_offset),(h8b_1
     & - 1))
      CALL TCE_SORT_1(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h8b-1)
     &,1,1.0d0,.false.)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ipeomccsdt_x2_14_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b_sort,k_b_sort)) 
     &CALL ERRQUIT('ipeomccsdt_x2_14_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimb,'noname',l_b,k_b)) CALL ERRQU
     &IT('ipeomccsdt_x2_14_1',5,MA_ERR)
      IF ((h8b .lt. h7b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h7b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,4,3,2,1,-1.0d0,.false.)
      END IF
      IF ((h7b .le. h8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,dbl_mb(k_b_offset),(p6b_2
     & - 1 + (noab+nvab) * (p5b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1)
     &,4,3,1,2,1.0d0,.false.)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ipeomccsdt_x2_14_1',6,MA
     &_ERR)
      CALL TCE_DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb
     &(k_a_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c
     &_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ipeomccsdt_x2_14_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ipeomccsdt_x2_14_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,two*dimc,'noname',l_c,k_c)) CALL ERRQU
     &IT('ipeomccsdt_x2_14_1',9,MA_ERR)
      CALL TCE_SORT_3(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h7b-1),3,2,1,-1.0d0,.false.)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,dbl_mb(k_c_offset),(p6b -
     & noab - 1 + nvab * (p5b - noab - 1 + nvab * (h7b - 1))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ipeomccsdt_x2_14_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ipeomccsdt_x2_14_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ipeomccsdt_x2_14_1(l_a_offset,k_a_offset,size)
C     i1 ( h7 p5 p6 )_vx
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER length
      INTEGER addr
      INTEGER dummy_p4b
      INTEGER h7b
      INTEGER p5b
      INTEGER p6b
      DOUBLE PRECISION size
      length = 0
      DO dummy_p4b = dummy,dummy
      DO h7b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ipeomccsdt_x2_14_1',0,MA_ERR)
      dbl_mb(k_a_offset) = dfloat(length)
      addr = 0
      size = 0.0d0
      DO dummy_p4b = dummy,dummy
      DO h7b = 1,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      IF (int_mb(k_spin+h7b-1)+int_mb(k_spin+dummy_p4b-1) .eq. int_mb(k_
     &spin+p5b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h7b-1),ieor(int_mb(k_sym+dummy_p4b-1),ieor(i
     &nt_mb(k_sym+p5b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_v,irrep_
     &x)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h7b-1)+int_mb(k_spin+dummy
     &_p4b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      addr = addr + 1
      dbl_mb(k_a_offset+addr) = dfloat(p6b - noab - 1 + nvab * (p5b - no
     &ab - 1 + nvab * (h7b - 1)))
      dbl_mb(k_a_offset+length+addr) = size
      size = size + dfloat(int_mb(k_range+dummy_p4b-1)) * dfloat(int_mb(
     &k_range+h7b-1)) * dfloat(int_mb(k_range+p5b-1)) * dfloat(int_mb(k_
     &range+p6b-1))
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
